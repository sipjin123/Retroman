using Sirenix.OdinInspector;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

public class ButtonEditor_v3 : ScriptableObject
{
    const string SCRIPT_PATH = "Assets/Framework/System/Scripts/Buttons/ButtonTypes.cs";
    const string FILE_PATH = "FrameworkFiles/FrameworkButtons.dat";

    [SerializeField, ShowInInspector]
    private MonoScript ScriptToEdit;

    [SerializeField, ShowInInspector]
    public List<string> Buttons;
    
    private void Awake()
    {
        RefreshTextFile();
    }
    
    //REFRESH THE LIST BY READING THE LINES OF THE TEXT FILE
    [Button(25)]
    private void RefreshTextFile()
    {
        Buttons = new List<string>(File.ReadAllLines(FILE_PATH));
    }

    [Button(25)]
    private void GenerateButtonEnum()
    {
        //UPDATES TEXT FILE USING THE CURRENT LIST
        if (File.Exists(FILE_PATH) == true)
        {
            using (StreamWriter outfile = new StreamWriter(FILE_PATH))
            {
                for (int i = 0; i < Buttons.Count; i++)
                {
                    outfile.WriteLine(Buttons[i]);
                }
            }
        }

        // delete old class
        if (File.Exists(SCRIPT_PATH))
        {
            File.Delete(SCRIPT_PATH);
        }

        if (File.Exists(SCRIPT_PATH) == false)
        {
            // do not overwrite
            using (StreamWriter outfile = new StreamWriter(SCRIPT_PATH))
            {
                outfile.WriteLine("// AUTOGENERATED: DO NOT EDIT");
                outfile.WriteLine("using System;");
                outfile.WriteLine(string.Empty);
                outfile.WriteLine("namespace Framework");
                outfile.WriteLine("{");
                outfile.WriteLine("\t[Serializable]");
                outfile.WriteLine("\tpublic enum EButton");
                outfile.WriteLine("\t{");
                
                for (int i = 0; i < Buttons.Count; i++)
                {
                    outfile.WriteLine("\t\t{0},", Buttons[i]);
                }
                
                outfile.WriteLine("\t}");
                outfile.WriteLine("}");
            }
        }

        AssetDatabase.Refresh();
    }
}
