//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace Common.Query {
	/**
	 * The center point of query system.
     * 
     * This holds resolvers for different query types.
	 */
	public static class QuerySystem {

        /**
         * Static instance used for query resolution.
         */
		private static readonly QuerySystemImplementation systemInstance = new QuerySystemImplementation();

		/**
		 * Registers a resolver for the given query type.
		 */
		public static void RegisterResolver(string queryId, QueryResultResolver resolver) {
			systemInstance.RegisterResolver(queryId, resolver);
		}

		/**
		 * Removes the resolver for the given query type.
		 */
		public static void RemoveResolver(string queryId) {
			systemInstance.RemoveResolver(queryId);
		}

		/**
		 * Queries the given query type.
		 */
		public static T Query<T>(string queryId) {
			return systemInstance.Query<T>(queryId);
		}

		/**
		 * Starts a query for the given query type.
         * Use this when the query has parameters.
         * Call the returned IQueryRequest's AddParameter() to add parameters
         * and then call Complete() to get the result.
		 */
		public static IQueryRequest Start(string queryId) {
			return systemInstance.Start(queryId);
		}

		/**
		 * Completes the query returning the result
		 */
		public static T Complete<T>() {
			return systemInstance.Complete<T>();
		}
		
		/**
		 * Returns whether or not the specified query id has a resolver
		 */
		public static bool HasResolver(string queryId) {
			return systemInstance.HasResolver(queryId);
		}

	}
}
