//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Framework;
using System;
using System.Collections.Generic;

namespace Common.Query {
	/**
	 * An instantiated implementation of the query system.
	 */
	class QuerySystemImplementation {

        /**
         * Map of query types and their resolvers.
         */
		private Dictionary<string, QueryResultResolver> ResolverMap;

        /**
         * Current query request.
         */
        private ConcreteQueryRequest CurrentRequest;

        /**
         * Current query result.
         */
        private ConcreteQueryResult CurrentResult;

        /**
         * True while a query is ongoing.
         */
        private bool IsLocked;

		/**
		 * Constructor
		 */
        public QuerySystemImplementation() {
			this.ResolverMap = new Dictionary<string, QueryResultResolver>();
			this.CurrentResult = new ConcreteQueryResult();
			this.CurrentRequest = new ConcreteQueryRequest();
		}

		/**
		 * Registers a query resolver
		 */
		public void RegisterResolver(string queryId, QueryResultResolver resolver) {
		    // system should not contains the specified resolver yet
            Assertion.Assert(!this.ResolverMap.ContainsKey(queryId), D.ERROR + "System should not contains the specified resolver yet. QueryId:{0}\n", queryId); 
			this.ResolverMap[queryId] = resolver;
		}

		/**
		 * Removes the specified resolver
		 */
		public void RemoveResolver(string queryId) {
			Assertion.Assert(this.ResolverMap.ContainsKey(queryId), D.ERROR + "ResolverMap should contains the specified QueryId:{0}\n", queryId);
            this.ResolverMap.Remove(queryId);
		}

		/**
		 * Requests for a query
		 */
		public T Query<T>(string queryId) {
		    // system should not contains the specified resolver yet
            Assertion.Assert(this.ResolverMap.ContainsKey(queryId), D.ERROR + "System should not contains the specified resolver yet. QueryId:{0}\n", queryId);

            try {
				CurrentResult.Clear();
				this.ResolverMap[queryId](CurrentRequest, CurrentResult);
				return CurrentResult.Get<T>();
			} finally {
				CurrentResult.Clear();
			}
		}

		/**
		 * Starts a query.
		 */
		public IQueryRequest Start(string queryId) {
			Assertion.Assert(!this.IsLocked, D.ERROR + "Can't start query if a previous query is still ongoing");
			Assertion.Assert(this.ResolverMap.ContainsKey(queryId), D.ERROR + "System should contain a resolver for the specified Id:{0}\n", queryId);

			this.CurrentRequest.QueryId = queryId;
			this.IsLocked = true;
			return CurrentRequest;
		}

		/**
		 * Completes the query returning the result
		 */
		public T Complete<T>() {
			Assertion.Assert(this.IsLocked, D.ERROR + "It should be locked at this point");

			try {
				CurrentResult.Clear();
				this.ResolverMap[CurrentRequest.QueryId](CurrentRequest, CurrentResult);
				return CurrentResult.Get<T>();
			} finally {
				this.IsLocked = false;
				CurrentResult.Clear();
				CurrentRequest.Clear();
			}
		}
		
		/**
		 * Returns whether or not the query id has a resolver
		 */
		public bool HasResolver(string queryId) {
			return this.ResolverMap.ContainsKey(queryId);
		}

	}
}

