//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using UnityEngine;

using Common.Fsm;
using Common.Time;

namespace Common.Fsm.Action {
	/**
	 * Rotates by using spherical interpolation
	 */
	public class RotateAction : FsmActionAdapter {

		private Transform transform; // the transform to rotate
		private Quaternion quatFrom; 
		private Quaternion quatTo;
		private float duration;
		private string finishEvent;

		private CountdownTimer timer;

		/**
		 * Constructor
		 */
		public RotateAction(FsmState owner) : base(owner) {
			this.timer = new CountdownTimer(1); // time will be set in OnEnter()
		}

		/**
		 * Constructor with specified time reference name
		 */
		public RotateAction(FsmState owner, string timeReferenceName) : base(owner) {
			this.timer = new CountdownTimer(1, timeReferenceName);
		}

		/**
		 * Initializes the action variables
		 */
		public void Init(Transform transform, Quaternion quatFrom, Quaternion quatTo, float duration, string finishEvent) {
			this.transform = transform;
			this.quatFrom = quatFrom;
			this.quatTo = quatTo;
			this.duration = duration;
			this.finishEvent = finishEvent;
		}

		public override void OnEnter() {
			if(Comparison.TolerantEquals(this.duration, 0)) {
				Finish();
				return;
			}
			
			if(Quaternion.Equals(this.quatFrom, this.quatTo)) {
				// starting and ending rotations are already the same
				Finish();
				return;
			}
			
			this.transform.rotation = this.quatFrom;
			timer.Reset(this.duration);
		}

		public override void OnUpdate() {
			this.timer.Update();

			if(this.timer.HasElapsed()) {
				Finish();
				return;
			}

			// interpolate rotation
			this.transform.rotation = Quaternion.Lerp(this.quatFrom, this.quatTo, this.timer.GetRatio());
		}

		private void Finish() {
			// snap to destination
			this.transform.rotation = this.quatTo;
			
			if(!string.IsNullOrEmpty(finishEvent)) {
				GetOwner().SendEvent(finishEvent);
			}
		}

	}
}
