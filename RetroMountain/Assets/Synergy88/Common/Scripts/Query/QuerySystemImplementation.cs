//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace Common.Query {
	/**
	 * An instantiated implementation of the query system.
	 */
	class QuerySystemImplementation {

		private Dictionary<string, QueryResultResolver> resolverMap;
		private ConcreteQueryResult result;
		private ConcreteQueryRequest request;
		private bool locked;

		/**
		 * Constructor
		 */
		public QuerySystemImplementation() {
			this.resolverMap = new Dictionary<string, QueryResultResolver>();
			this.result = new ConcreteQueryResult();
			this.request = new ConcreteQueryRequest();
		}

		/**
		 * Registers a query resolver
		 */
		public void RegisterResolver(string queryId, QueryResultResolver resolver) {
			Assertion.Assert(!this.resolverMap.ContainsKey(queryId)); // system should not contains the specified resolver yet
			this.resolverMap[queryId] = resolver;
		}

		/**
		 * Removes the specified resolver
		 */
		public void RemoveResolver(string queryId) {
			Assertion.Assert(this.resolverMap.ContainsKey(queryId));
			this.resolverMap.Remove(queryId);
		}

		/**
		 * Requests for a query
		 */
		public T Query<T>(string queryId) {
			Assertion.Assert(this.resolverMap.ContainsKey(queryId)); // system should contain a resolver for the specified id

			try {
				result.Clear();
				this.resolverMap[queryId](request, result);
				return result.Get<T>();
			} finally {
				result.Clear();
			}
		}

		/**
		 * Starts a query.
		 */
		public IQueryRequest Start(string queryId) {
			Assertion.Assert(!this.locked); // can't start query if a previous query is still ongoing
			Assertion.Assert(this.resolverMap.ContainsKey(queryId)); // system should contain a resolver for the specified id

			this.request.QueryId = queryId;
			this.locked = true;
			return request;
		}

		/**
		 * Completes the query returning the result
		 */
		public T Complete<T>() {
			Assertion.Assert(this.locked); // it should be locked at this point

			try {
				result.Clear();
				this.resolverMap[request.QueryId](request, result);
				return result.Get<T>();
			} finally {
				this.locked = false;
				result.Clear();
				request.Clear();
			}
		}
		
		/**
		 * Returns whether or not the query id has a resolver
		 */
		public bool HasResolver(string queryId) {
			return this.resolverMap.ContainsKey(queryId);
		}

	}
}

